# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/

version: 2.1

# Workflows orchestrate a set of jobs to be run;
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test

orbs:
  slack: circleci/slack@4.0.2

jobs:
  build-and-test:
    macos:
      xcode: 12.0.1 # Specify the Xcode version to use

    steps:
      - checkout

      # restore pods related caches
      - restore_cache:
          keys:
            - cocoapods-cache-v4-{{ arch }}-{{ .Branch }}-{{ checksum "Podfile.lock" }}
            - cocoapods-cache-v4-{{ arch }}-{{ .Branch }}
            - cocoapods-cache-v4
            - 1-gems-{{ checksum "Gemfile.lock" }}

      # install Gemfile
      - run: bundle check || bundle install --path vendor/bundle --clean

      # install CocoaPods - using default CocoaPods version, not the bundle
      - run:
          name: Repo Update & Install CocoaPods
          command: bundle exec pod install

      # save pods related files
      - save_cache:
          name: Saving CocoaPods Cache
          key: cocoapods-cache-v4-{{ arch }}-{{ .Branch }}-{{ checksum "Podfile.lock" }}
          paths:
            - ./Pods
            - ~/.cocoapods
            - vendor/bundle

      - run:
          name: Lint Source Code
          command: make lint

      - run:
          name: Install nicklockwood/SwiftFormat
          command: brew install swiftformat

      - run:
          name: Swift Formating
          command: swiftformat . --lint --swiftversion 5.2

      # pre-start the simulator to prevent timeouts
      - run:
          name: Pre-start Simulator
          command: xcrun instruments -w "iPhone 8 (13.1) [" || true

      - run:
          name: Run Tests
          command: make test

      # code coverage
      - run:
          name: Upload Code Coverage Report
          command: |
            curl -s https://codecov.io/bash > codecov;
            VERSION=$(grep 'VERSION=\".*\"' codecov | cut -d'"' -f2);
            SHAVERSION=$(shasum -v);
            echo "Using CodeCov version '$VERSION'"
            echo "Using shasum '$SHAVERSION'"
            for i in 1 256 512
            do
              shasum -a $i -c --ignore-missing <(curl -s "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM") ||
              shasum -a $i -c <(curl -s "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM" | head -n 1)
            done
            bash ./codecov -v -X s3 -c -D "./build/out" -J "AEPAnalytics"

      # verify XCFramework archive builds
      - run:
          name: Build XCFramework
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              make archive
            fi

      # slack notification
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "AEPAnalytics [iOS] -> Build Failed :x:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n${CIRCLE_PROJECT_REPONAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When:*\n$(date +'%m/%d/%Y %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n${CIRCLE_USERNAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${CIRCLE_BRANCH}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "emoji": true,
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}",
                      "style": "primary"
                    }
                  ]
                }
              ]
            }

      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "AEPAnalytics [iOS] -> Build Successful :tada:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n${CIRCLE_PROJECT_REPONAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When:*\n$(date +'%m/%d/%Y %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n${CIRCLE_USERNAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${CIRCLE_BRANCH}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "emoji": true,
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}",
                      "style": "primary"
                    }
                  ]
                }
              ]
            }
